void printBottom(Node *root, int curr, int hd, map<int, pair<int, int>> &m){
    if(root==NULL){
        return;
    }
    if(m.find(hd)==m.end()){
        m[hd]=make_pair(root->data, curr);
    }
    else{
        pair<int, int> p=m[hd];
        if(p.second <= curr){
            m[hd].second=curr;
            m[hd].first=root->data;
        }
    }
    printBottom(root->left, curr+1, hd-1, m);
    printBottom(root->right, curr+1, hd+1, m);
}

void bottomView(Node *root)
{
   // Your Code Here
   map<int, pair<int, int>> m;
   printBottom(root, 0,0, m);
   map<int, pair<int, int>> :: iterator it;
   for(it=m.begin(); it!=m.end(); it++){
       pair<int, int>p=it->second;
       cout<<p.first<<" ";
   }
   
}
