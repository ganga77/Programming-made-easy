
/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*The function takes an array of heights, width and 
length as its 3 arguments where each index i value 
determines the height, width, length of the ith box. 
Here n is the total no of boxes.*/
class box
{
    public:
    int h,w,l;
};
int compare (const void *a, const void * b) 
{ 
    return ( (*(box *)b).l * (*(box *)b).w ) - 
           ( (*(box *)a).l * (*(box *)a).w ); 
} 
  
int maxHeight(int height[],int width[],int length[],int n)
{
    //Your code here
    box arr[3*n];
    int index=0;
    for(int i=0;i<n;i++)
    {
      arr[index].h=height[i];
      arr[index].l=max(width[i],length[i]);
      arr[index].w=min(width[i],length[i]);
      index++;
      arr[index].h=width[i];
      arr[index].l=max(height[i],length[i]);
      arr[index].w=min(height[i],length[i]);
      index++;
      arr[index].h=length[i];
      arr[index].l=max(height[i],width[i]);
      arr[index].w=min(height[i],width[i]);
      index++;
    }
    n=3*n;
    int lis[n]; 
    qsort (arr, n, sizeof(arr[0]), compare); 
   for (int i = 0; i < n; i++ ) 
      lis[i] = arr[i].h; 
  
   
   for (int i = 1; i < n; i++ ) 
      for (int j = 0; j < i; j++ ) 
         if ( arr[i].w < arr[j].w && 
              arr[i].l < arr[j].l && 
              lis[i] < lis[j] + arr[i].h 
            ) 
         { 
              lis[i] = lis[j] + arr[i].h; 
         } 
  
  
   /* Pick maximum of all msh values */
   int max = -1; 
   for ( int i = 0; i < n; i++ ) 
      if ( max < lis[i] ) 
         max = lis[i]; 
  
   return max; 
    
    
}
